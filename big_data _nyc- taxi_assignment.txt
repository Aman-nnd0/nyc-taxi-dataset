                                              ----The New York City Taxi & Limousine Commission (TLC) data--
                                                        -aman.nnd0@yahoo.com



--As the NYC Taxi Data is stored in common folder '/common_folder/nyc_taxi_data/', we will create a new external table in personal DB.
-- Droppping the table in case if exists
drop table aman_assignment1; 
create external table if not exists aman_assignment1 ( 
        vendorid int ,
        tpep_pickup_datetime string,
        tpep_dropoff_datetime string,
        passenger_count int,
        trip_distance double,
        ratecodeid int,
        store_and_fwd_flag string ,
        pulocationid int,
        dolocationid int,
        payment_type int,
        fare_amount double,
        extra double,
        mta_tax double,     
        tip_amount double,
        tolls_amount double,
        improvement_surcharge double,
        total_amount double ) ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE
location '/common_folder/nyc_taxi_data/'
tblproperties ("skip.header.line.count"="2");

-- Running the query to check all records 
select * from aman_assignment1;

-- Checking total rows; 
select count(*) from aman_assignment1;
-- 1174568 total rows

-- a. Checking the records has each TPEP provided provided  
select count(*) as N_Records , vendorid as TPEP_Provider from aman_assignment1 
group by vendorid; 

-- 1 (Creative Mobile Technologies, LLC) -> 527385
-- 2 (VeriFone Inc.) -> 647183

-- b. Checking if the file contains the records having pickup month and year other than 2017 & (Nov, Dec) respectively
select count(*) as number_of_record from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) not in('2017-11','2017-12');

-- 14 records are there having pick month and year not equal to (November, December) and 2017 respectively.


-- c. Let's check  columns having1 value
select sum(case when 	VendorID 	 is null then 1 else 0 end) 	VendorID 	,
sum(case when 	tpep_pickup_datetime 	 is null then 1 else 0 end) 	tpep_pickup_datetime 	,
sum(case when 	tpep_dropoff_datetime 	 is null then 1 else 0 end) 	tpep_dropoff_datetime 	,
sum(case when 	passenger_count 	 is null then 1 else 0 end) 	passenger_count 	,
sum(case when 	trip_distance 	 is null then 1 else 0 end) 	trip_distance 	,
sum(case when 	RatecodeID 	 is null then 1 else 0 end) 	RatecodeID 	,
sum(case when 	store_and_fwd_flag 	 is null then 1 else 0 end) 	store_and_fwd_flag 	,
sum(case when 	PULocationID 	 is null then 1 else 0 end) 	PULocationID 	,
sum(case when 	DOLocationID 	 is null then 1 else 0 end) 	DOLocationID 	,
sum(case when 	payment_type 	 is null then 1 else 0 end) 	payment_type 	,
sum(case when 	fare_amount 	 is null then 1 else 0 end) 	fare_amount 	,
sum(case when 	extra 	 is null then 1 else 0 end) 	extra 	,
sum(case when 	mta_tax 	 is null then 1 else 0 end) 	mta_tax 	,
sum(case when 	tip_amount 	 is null then 1 else 0 end) 	tip_amount 	,
sum(case when 	tolls_amount 	 is null then 1 else 0 end) 	tolls_amount 	,
sum(case when 	improvement_surcharge 	 is null then 1 else 0 end) 	improvement_surcharge 	,
sum(case when 	total_amount 	 is null then 1 else 0 end) 	total_amount 	
from aman_assignment1;
---all zeroes that is no null 

-- Checking passenger_count for pickup month and year as (Nov, Dec) and 2017 respectively
select passenger_count, count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') group by passenger_count;
-- it looks normal

-- Checking tpep_pickup_datetime for NULL values
select count(*) from aman_assignment1 where tpep_pickup_datetime is null;
-- No such value

-- Checking if the trip distance has zero or negative value for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and (trip_distance = 0 or trip_distance < 0);
-- 7401 total rows

-- Checking RateCodeID for pickup month and year as (Nov, Dec) and 2017 respectively
select RateCodeID, count(*) from aman_assignment1 
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') group by RateCodeID;
-- We can see that ratecodeid 99 also exists and it is not valid one

-- Checking if the fare_amount column has negative or zero amount for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and fare_amount <= 0;
--870 total rows

-- Checking if the extra column has negative values for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and extra < 0;
-- 286 total rows

-- Checking if the mta_tax column has other than 0 or 0.5 value for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and mta_tax not in (0.5, 0);
-- 548 total rows

-- Checking if the tip_amount column has negative value for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and tip_amount < 0;
-- 4 total rows

-- Checking from which vendor this erroneous rows are coming
select distinct(vendorid) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and tip_amount < 0;
--From 2nd Vendor i.e. VeriFone Inc.


-- Checking if the tolls_amount column has negative value for pickup month and year as (Nov, Dec) and 2017 respectively
select count(*) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and tolls_amount < 0;
-- 3 total rows

-- Checking from which vendor this erroneous rows are coming
select distinct(vendorid) from aman_assignment1
where substr(tpep_pickup_datetime, 1, 7) in('2017-11','2017-12') and tolls_amount < 0;
--From 2nd Vendor i.e. VeriFone Inc.


-- ORC Partitioned Table Creation for the nyc_taxi external table having tpep_pickup_datetime is in November and December 2017. 

-- Dropping table nyc_yellow_taxi_partition_orc in case if exists
drop table aman_assignment1_partition_orc;

-- Creating nyc_yellow_taxi_partition_orc table
create external table if not exists aman_assignment1_partition_orc (
        vendorid int,
        tpep_pickup_datetime string,
        tpep_dropoff_datetime string,
        passenger_count int,
        trip_distance double,
        ratecodeid int,
        store_and_fwd_flag string ,
        pulocationid int,
        dolocationid int,
        payment_type int,
        fare_amount double,
        extra double,
        mta_tax double,     
        tip_amount double,
        tolls_amount double,
        improvement_surcharge double,
        total_amount double ) partitioned by (yr int, mnth int)
stored as orc location '/user/hive/warehouse/aman_orc'
tblproperties ("orc.compress"="SNAPPY");

SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Writing the data from external table nyc_yellow_taxi to nyc_yellow_taxi_partition_orc
insert overwrite table aman_assignment1_partition_orc partition(yr, mnth)
select vendorid, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance,
ratecodeid, store_and_fwd_flag, pulocationid, dolocationid, payment_type, fare_amount, extra, mta_tax, 
tip_amount, tolls_amount, improvement_surcharge, total_amount,
year(tpep_pickup_datetime) as yr, month(tpep_pickup_datetime) as mnth
from aman_assignment1 
where passenger_count not in(0, 192) and trip_distance > 0 
and RateCodeID != 99 and fare_amount > 0 and extra >= 0 
and mta_tax in (0,0.5) and tip_amount >= 0
and tolls_amount >= 0 and improvement_surcharge = 0.30 
and total_amount >= 0 and year(tpep_pickup_datetime) = 2017 and month(tpep_pickup_datetime) in (11,12);


-- Running the query to check all records 
select * from aman_assignment1_partition_orc limit 10;

-- Checking total rows; 
select count(*) from aman_assignment1_partition_orc;
-- 1159745 total rows

-- Counting the number of rows in which any column has NULL values
select count(*) as Total_NULL_records from aman_assignment1_partition_orc
where vendorid is null 
or tpep_pickup_datetime is null
or tpep_pickup_datetime is null
or passenger_count is null
or trip_distance is null
or ratecodeid is null
or store_and_fwd_flag is null
or pulocationid is null
or dolocationid is null
or payment_type is null
or fare_amount is null
or extra is null
or mta_tax is null
or tip_amount is null
or tolls_amount is null
or improvement_surcharge is null
or total_amount is null
or yr is null
or mnth is null;
 --total null records=0
 
 
 Analysis-I

--1=Compare the overall average fare per trip for November and December.
select round(avg(fare_amount),2) as Avg_Fareamount, mnth as Month from aman_assignment1_partition_orc 
group by mnth;
-=answer---- Averager fare per trip for following months :
-- November - 13.06
-- December - 12.85

--2=Explore the ‘number of passengers per trip’ - how many trips are made by each level of ‘Passenger_count’? Do most people travel solo or with other people?
select passenger_count,round((count(*)*100/1174568 ),4) cnt
from aman_assignment1_partition_orc  group by passenger_count
order by cnt desc;

--Answer-
 
 --	passenger_count	         cnt  
--1 	1	                 69.9203
--2	    2	                 14.9707
--3	    5	                  4.6266
--4	    3                     4.2954
--5	    6	                  2.8127
--6	    4 	                  2.1122
--7	    7                     0.0003
 
 -- Solo rides are most common , dominant infact with almost 71% oll data belonging to them
-- Dual rides are the only other significant category with 15% occupancy
-- Rest all are marginal below 5 %
-- value for 9,8,7 are two small to be of any significance, may be special limo rides, corrupt data
select passenger_count,count(*) cnt
from aman_assignment1_partition_orc where passenger_count in (9,8,7) 
group by passenger_count
order by cnt desc;
passenger_count	cnt
 --	 passenger_count	   cnt
---1	7               	3


--3=Which is the most preferred mode of payment?

select payment_type,round((count(*)*100/1174568),4) cnt
from  aman_assignment1_partition_orc group by payment_type
order by cnt desc;

------payment_type	  cnt
----1	1	        66.646 Credit card
----2	2	        31.5717  Cash
----3	3	         0.4072 No charge
----4	4	          0.1131  Dispute

-- Credit card pays are dominant with 66.646% and cash payment are 2nd highest paymnet 31.5717%
-- rest all modes are negligable

--4=What is the average tip paid per trip? Compare the average tip with the 25th, 50th and 75th percentiles and comment whether the ‘average tip’ is a representative statistic (of the central tendency) of ‘tip amount paid’. Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric column (including floating point types) in the group.
select round(avg(tip_amount),2)  
from aman_assignment1_partition_orc;
-- 1.85
select percentile_approx(tip_amount,array(0.25,0.40,0.45,0.50,0.60,0.65,0.75))  
from aman_assignment1_partition_orc;
--   25%, 0.40, 0.45, 50%,  60%,  65%,  75%
-- 	[0.0, 1.0 , 1.15, 1.35, 1.757, 1.992, 2.45]

-- From the %centile values we can see that data is skewed towards the higher percentile.
-- 25% or more values being zero tip, do play a high part in this behaviour
-- again the median 1.35 is much lower then the avg 1.82 due to the skewness towards higher values
-- Hence mean is not representative statistic of centeral tendency here.
--5=Explore the ‘Extra’ (charge) variable - what fraction of total trips have an extra charge is levied?
select extra,round((count(*)*100/1174568),4) cnt from (
select case when extra>0 then 1 else 0 end  extra
from aman_assignment1_partition_orc ) T
group by extra
order by cnt desc;
-- Extra applied    %age records
--      0	        52.99
--      1	        45.7481
-- The distribusion is fairly even with 45.7481% records having extra charges applied , where as  52.99% have no extra charges applied


----Analysis-II

--1=What is the correlation between the number of passengers on any given trip, and the tip paid per trip? Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)
select round(corr(passenger_count, tip_amount),4) from aman_assignment1_partition_orc;
-- -0.005

-- the value is fairly small although negative but its would be fair to say that passenger count is unrealted to the tip amount paid.
select round(corr(is_solo, tip_amount),4) from 
(select case when passenger_count=1 then 1 else 0 end is_solo,tip_amount 
from aman_assignment1_partition_orc ) T;
-- 0.0054, comparing only single vs multiple rider count their is still very low co-relation
select is_solo,round(avg(tip_amount),4) from 
(select case when passenger_count=1 then 1 else 0 end is_solo,tip_amount 
from aman_assignment1_partition_orc ) T group by is_solo;
--  0	1.8277
--	1	1.8575
-- Values are almost same 
--2=Segregate the data into five segments of ‘tip paid’: [0-5), [5-10), [10-15) , [15-20) and >=20. Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).

select Tip_range, round((count(*)*100/1174568),4) cnt
from (select
case when (tip_amount>=0 and tip_amount<5)   then '[0-5)' 
     when (tip_amount>=5 and tip_amount<10)  then '[5-10)' 
     when (tip_amount>=10 and tip_amount<15) then '[10-15)'
     when (tip_amount>=15 and tip_amount<20) then '[15-20)'
     when (tip_amount>=20)                   then '>=20' end Tip_range
     from aman_assignment1_partition_orc) T 
     group by Tip_range
     order by cnt desc;
-- [0-5)	91.0147
-- [5-10)	5.5862
-- [10-15)	1.8228
-- [15-20)	0.2237
-- >=20	    0.0906
-- 0-5 range is the most prominate group with 92.4% records, we already know 25%+ of these are 0 values from teh precious percentile based check
-- 5-10 represening a small fraction of 5.6%, remaning set are almost neglihgble amount to 2% of data
--3=Which month has a greater average ‘speed’ - November or December? Note that the variable ‘speed’ will have to be derived from other metrics. Hint: You have columns for distance and time.

-- we will calculate duration by suntaring drop of time with pick uo time, since we are using unix timestamp function(as direct suntraction of timestamp column didn't work)
-- values will be returned in sec hence we will be dividing it by 3600 to get value sin hour
-- since distance is psecified in miles out final value will be in miles/hour unit
select mnth , round(avg(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime) )/3600) ),2) avg_speed
from aman_assignment1_partition_orc
group by mnth
order by avg_speed desc;
--4=Analyse the average speed of the most happening days of the year, i.e. 31st December (New year’s eve) and 25th December (Christmas) and compare it with the overall average. 
select IsHoliday, round(avg(speed),2) avg_speed from 
(select case when ((tpep_pickup_datetime>='2017-12-25 00:00:00.0' and tpep_pickup_datetime<'2017-12-26 00:00:00.0') 
or (tpep_pickup_datetime>='2017-12-31 00:00:00.0' and tpep_pickup_datetime<'2018-01-01 00:00:00.0')  ) then 1 else 0 end IsHoliday   , 
trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime) )/3600) speed
from aman_assignment1_partition_orc) T
group by IsHoliday
order by avg_speed desc;
-- 1	14.01
-- 0	10.98

select 14.01-10.98;
-- The comparision between holiday vs non-holiday , the during the holiday atleast the streets of New York are clear(er)
-- as the Cab's are running at a faster average speed by a margin of  3.02 miles/hour
-- The non festive day average is in sync with november and december averages at around 12.6 miles/per hour
-- let's confirm the overall averages once
select round(avg(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime) )/3600)),2) avg_speed
from aman_assignment1_partition_orc;
-- 11.05 is the overall avg speed as expected so the faster speed on 25th and 31 dec amounts to 0.05(11.05 was for non holiday days) increment on the overall speed 
-- christmas
select Day_type,round(avg(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime) )/3600)),2) avg_speed
from ( 
select trip_distance,tpep_dropoff_datetime,tpep_pickup_datetime,
case when ((tpep_pickup_datetime>='2017-12-25 00:00:00.0' and tpep_pickup_datetime<'2017-12-26 00:00:00.0')) then 1
when ((tpep_pickup_datetime>='2017-12-31 00:00:00.0' and tpep_pickup_datetime<'2018-01-01 00:00:00.0')  ) then 2 else 0 end Day_type 
from aman_assignment1_partition_orc
) T
group by Day_type;

--  0	10.98 rest of the days
--  1   15.27 Chritsmas
--  2	13.24 new year eve

-- The fastest avg speed is oberved on christmas day 15.27 miles/hour; 2.03 miles/hour faster than new year eve mark of 13.24 miles/hour
-- The result represent similar value of the combined is-holiday data
--i.e. Both are indidvidually much faster than the average time taken on other days .